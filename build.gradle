buildscript {
    ext {
        vertx_version = "3.9.1"
        ch_qos_logback_version = '1.2.3'
    }
    repositories {
        jcenter()
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'idea'
}

group 'codes.unwritten'
version '1.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

def mainClassName = 'codes.unwritten.scalfold.MainKt'

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation "io.vertx:vertx-lang-kotlin:$vertx_version"
    implementation "io.vertx:vertx-lang-kotlin-coroutines:$vertx_version"
    implementation "io.vertx:vertx-core:$vertx_version"
    implementation "io.vertx:vertx-web:$vertx_version"
    implementation "io.vertx:vertx-web-client:$vertx_version"
    implementation "ch.qos.logback:logback-classic:$ch_qos_logback_version"
    implementation "net.logstash.logback:logstash-logback-encoder:5.2"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.11.1"
    implementation "com.xenomachina:kotlin-argparser:2.0.7"
    implementation 'com.auth0:java-jwt:3.4.0'
    implementation "com.google.guava:guava:28.2-jre"
    implementation "commons-codec:commons-codec:1.14"
    implementation 'commons-lang:commons-lang:20030203.000129'
    testImplementation "io.vertx:vertx-unit:$vertx_version"
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}

shadowJar {
    archiveBaseName = 'app'
    archiveVersion = ''
    archiveClassifier = ''

    manifest {
        attributes 'Main-Class': mainClassName
    }
    mergeServiceFiles {
        include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
    }
}

shadowJar.dependsOn(build)

task prepareDocker(type: Tar, dependsOn: shadowJar) {
    archiveFileName = 'add.tar'
    destinationDirectory = file("${buildDir}/docker")
    from("${projectDir}") {
        include "conf/*.json"
    }
    from("${buildDir}/libs/app.jar") {
        into "app"
    }
}

task collectArtifacts(type: Copy, dependsOn: prepareDocker) {
    into "${buildDir}/docker"
    from("${projectDir}") {
        include "Dockerfile"
    }
}

// Azure WebApp deployment
// Use `az webapp deployment source config-zip --resource-group <rg> --name <name> --src build/webapp/webapp.zip` to deploy
task prepareWebAppZip(type: Zip, dependsOn: shadowJar) {
    archiveFileName = 'webapp.zip'
    destinationDirectory = file("${buildDir}/webapp")
    from("${projectDir}/conf") {
        include "config.json"
    }
    from("${projectDir}/conf") {
        include "web.config"
    }
    from("${buildDir}/libs/app.jar")
}
